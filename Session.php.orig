<?php

namespace Skinny;

if (!defined('PHP_VERSION_ID')) {
    $version = explode('.', PHP_VERSION);

    define('PHP_VERSION_ID', ($version[0] * 10000 + $version[1] * 100 + $version[2]));
}

/**
 * Description of Session
 * TODO: klasa jest do przerobiernia, aby używała Db\Record, który będzie w library/Skinny
 *
 * @author Daro
 */
class Session extends ArrayWrapper {

    /**
     * Session configuration object
     * @var Store
     */
    protected $_config;

    /**
     * Obiekt adaptera obsługującego właściwy zapis i odczyt danych sesji
     * @var Session\AdapterInterface
     */
    protected $_adapter;

    public function __construct($config, $adapter) {
        $this->_config = $config;
        $this->_adapter = $adapter;

        // zaślepka, ponieważ $_SESSION jeszcze nie istnieje
        $sessionData = array();
        parent::__construct($sessionData);
    }

    // TODO: filtry do danych
    // TODO: funkcje obsługujące automatyczny odczyt/zapis do bazy

    public function isStarted() {
        if (PHP_VERSION_ID < 50400) {
            return session_id() == '';
        }
        return session_status() == PHP_SESSION_ACTIVE;
    }

    public function start() {
        if ($this->isStarted()) {
            return false;
        }

        $this->_adapter->setSessionConfig($this->_config);
        $this->registerCallbacks();
        $defaulName = session_name();
        session_name($this->_config->name($defaulName));

        $result = session_start();
        $this->_data = &$_SESSION;
        return $result;
    }

    protected function registerCallbacks() {
        $result = session_set_save_handler(
                array($this, 'open'), array($this, 'close'), array($this, 'read'), array($this, 'write'), array($this, 'destroy'), array($this, 'gc')
        );

        register_shutdown_function('session_write_close');

        return $result;
    }

    function open($savePath, $sessionName) {
        try {
            return $this->_adapter->open($savePath, $sessionName);
        } catch (\Exception $e) {
            die('Session fatal error occured while opening session: ' . $e->getMessage());
        }
    }

    function close() {
<<<<<<< HEAD
        // Nie trzeba nic robić

        return true;
    }

    function read($id) {
        $result = $this->getData($id);
        if (false === $result) {
            return '';
        }

        if (!$result['valid']) {
            $this->destroy($id);
            return '';
=======
        try {
            return $this->_adapter->close();
        } catch (\Exception $e) {
            die('Session fatal error occured while closing session: ' . $e->getMessage());
>>>>>>> Stworzenie obsługi adapetrów sesji
        }
    }

    function read($id) {
        try {
<<<<<<< HEAD
            $select = $this->_db->select();
            $select->from($this->_config->table->name('session', true), array(
                $this->_config->table->data('data', true),
                new \Zend_Db_Expr('IF (' . $this->_db->quoteIdentifier($this->_config->table->expires('expires', true)) . ' > now(), 1, 0) as "valid"')
            ));
            $select->where($this->_db->quoteIdentifier($this->_config->table->id('id', true)) . ' = ?', $id);
            $row = $this->_db->fetchRow($select);
            if (empty($row)) {
                return false;
            }
            return $row;
=======
            return $this->_adapter->read($id);
>>>>>>> Stworzenie obsługi adapetrów sesji
        } catch (\Exception $e) {
            die('Session fatal error occured while reading data: ' . $e->getMessage());
        }
    }

    function write($id, $data) {
        try {
            return $this->_adapter->write($id, $data);
        } catch (\Exception $e) {
            die('Session fatal error occured while writing data: ' . $e->getMessage());
        }
    }

    function destroy($id) {
        try {
            return $this->_adapter->destroy($id);
        } catch (\Exception $e) {
            die('Session fatal error occured while removing data: ' . $e->getMessage());
        }
    }

    function gc($maxlifetime) {
        try {
            return $this->_adapter->gc($maxlifetime);
        } catch (\Exception $e) {
            die('Session fatal error occured while collecting spoiled sessions: ' . $e->getMessage());
        }
    }

}
